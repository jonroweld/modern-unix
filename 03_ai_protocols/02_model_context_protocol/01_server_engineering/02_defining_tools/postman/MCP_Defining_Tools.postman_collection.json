{
	"info": {
		"name": "MCP Tools - Complete Scenarios",
		"description": "Test all 5 essential MCP tool patterns: simple lists, primitives, Pydantic models, rich content, and multi-content responses. Perfect for beginners learning MCP tools.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "01. Initialize Session",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json, text/event-stream"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"initialize\",\n    \"params\": {\n        \"protocolVersion\": \"2025-06-18\",\n        \"capabilities\": {},\n        \"clientInfo\": {\n            \"name\": \"postman-tools-test\",\n            \"version\": \"1.0.0\"\n        }\n    }\n, \"id\": 1}"
				},
				"url": {
					"raw": "{{baseUrl}}/mcp",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"mcp"
					]
				},
				"description": "Initialize MCP session with the tools server. This is required before any other operations."
			}
		},
		{
			"name": "02. Send Initialized Notification",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json, text/event-stream"
					},
					{
						"key": "MCP-Protocol-Version",
						"value": "2025-06-18"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"notifications/initialized\",\n    \"params\": {}\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/mcp",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"mcp"
					]
				},
				"description": "Complete the MCP session initialization with the required notification."
			}
		},
		{
			"name": "03. Discover Available Tools",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json, text/event-stream"
					},
					{
						"key": "MCP-Protocol-Version",
						"value": "2025-06-18"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"tools/list\",\n    \"params\": {},\n    \"id\": 3\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/mcp",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"mcp"
					]
				},
				"description": "Discover all 5 tools: list_cities, get_temperature, get_weather, add_numbers, and analyze_data."
			}
		},
		{
			"name": "04. Simple List Tool (list_cities)",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json, text/event-stream"
					},
					{
						"key": "MCP-Protocol-Version",
						"value": "2025-06-18"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"tools/call\",\n    \"params\": {\n        \"name\": \"list_cities\",\n        \"arguments\": {}\n    },\n    \"id\": 4\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/mcp",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"mcp"
					]
				},
				"description": "Test simple list return type. MCP auto-wraps as {\"result\": [\"London\", \"Paris\", \"Tokyo\"]}."
			}
		},
		{
			"name": "05. Simple Primitive Tool (get_temperature)",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json, text/event-stream"
					},
					{
						"key": "MCP-Protocol-Version",
						"value": "2025-06-18"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"tools/call\",\n    \"params\": {\n        \"name\": \"get_temperature\",\n        \"arguments\": {\n            \"city\": \"London\"\n        }\n    },\n    \"id\": 5\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/mcp",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"mcp"
					]
				},
				"description": "Test simple float return type. MCP auto-wraps as {\"result\": 22.5}."
			}
		},
		{
			"name": "06. Structured Data Tool (get_weather)",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json, text/event-stream"
					},
					{
						"key": "MCP-Protocol-Version",
						"value": "2025-06-18"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"tools/call\",\n    \"params\": {\n        \"name\": \"get_weather\",\n        \"arguments\": {\n            \"city\": \"Paris\"\n        }\n    },\n    \"id\": 6\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/mcp",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"mcp"
					]
				},
				"description": "Test Pydantic model return. Returns structured WeatherData with temperature, humidity, condition, wind_speed."
			}
		},
		{
			"name": "07. Rich Content Tool (add_numbers)",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json, text/event-stream"
					},
					{
						"key": "MCP-Protocol-Version",
						"value": "2025-06-18"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"tools/call\",\n    \"params\": {\n        \"name\": \"add_numbers\",\n        \"arguments\": {\n            \"a\": 15.5,\n            \"b\": 27.3\n        }\n    },\n    \"id\": 7\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/mcp",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"mcp"
					]
				},
				"description": "Test TextContent with annotations. Returns rich content with audience targeting and priority metadata."
			}
		},
		{
			"name": "08. Multi-Content Tool (analyze_data)",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json, text/event-stream"
					},
					{
						"key": "MCP-Protocol-Version",
						"value": "2025-06-18"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"tools/call\",\n    \"params\": {\n        \"name\": \"analyze_data\",\n        \"arguments\": {\n            \"data_type\": \"sales\",\n            \"sample_size\": 500\n        }\n    },\n    \"id\": 8\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/mcp",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"mcp"
					]
				},
				"description": "Test multi-content response. Returns both TextContent and ImageContent items in a single response."
			}
		},
		{
			"name": "09. Error Test - Invalid Tool",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json, text/event-stream"
					},
					{
						"key": "MCP-Protocol-Version",
						"value": "2025-06-18"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"tools/call\",\n    \"params\": {\n        \"name\": \"nonexistent_tool\",\n        \"arguments\": {}\n    },\n    \"id\": 9\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/mcp",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"mcp"
					]
				},
				"description": "Test error handling by calling a tool that doesn't exist."
			}
		},
		{
			"name": "10. Error Test - Missing Parameter",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json, text/event-stream"
					},
					{
						"key": "MCP-Protocol-Version",
						"value": "2025-06-18"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"tools/call\",\n    \"params\": {\n        \"name\": \"get_temperature\",\n        \"arguments\": {}\n    },\n    \"id\": 10\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/mcp",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"mcp"
					]
				},
				"description": "Test error handling by omitting required 'city' parameter for get_temperature tool."
			}
		},
		{
			"name": "11. Error Test - Wrong Parameter Type",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json, text/event-stream"
					},
					{
						"key": "MCP-Protocol-Version",
						"value": "2025-06-18"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"tools/call\",\n    \"params\": {\n        \"name\": \"add_numbers\",\n        \"arguments\": {\n            \"a\": \"hello\",\n            \"b\": \"world\"\n        }\n    },\n    \"id\": 11\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/mcp",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"mcp"
					]
				},
				"description": "Test error handling by passing strings instead of numbers to add_numbers tool."
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8000",
			"type": "string"
		}
	]
} 