{
	"info": {
		"name": "MCP Exposing Resources",
		"description": "Educational Postman collection for testing MCP servers with resources. Demonstrates resource discovery and reading for static, dynamic, and templated resources using the 2025-06-18 specification.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "01. Initialize Session",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json, text/event-stream"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"initialize\",\n    \"params\": {\n        \"protocolVersion\": \"2025-06-18\",\n        \"capabilities\": {},\n        \"clientInfo\": {\n            \"name\": \"postman-resources-test\",\n            \"title\": \"Postman MCP Resources Test Client\",\n            \"version\": \"1.0.0\"\n        }\n    },\n    \"id\": 1\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/mcp",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"mcp"
					]
				},
				"description": "The mandatory first step in any compliant MCP session. This negotiates the protocol version and capabilities with the server."
			},
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has no error\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.not.have.property('error');",
							"});",
							"",
							"pm.test(\"Response has correct protocol version\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.result.protocolVersion).to.equal('2025-06-18');",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "02. Discover Available Resources",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json, text/event-stream"
					},
					{
						"key": "MCP-Protocol-Version",
						"value": "2025-06-18"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"resources/list\",\n    \"params\": {},\n    \"id\": 2\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/mcp",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"mcp"
					]
				},
				"description": "Discover what resources the server provides. Should return all available resources with enhanced 2025-06-18 metadata including title fields."
			},
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has no error\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.not.have.property('error');",
							"});",
							"",
							"pm.test(\"Response has resources array\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.result).to.have.property('resources');",
							"    pm.expect(jsonData.result.resources).to.be.an('array');",
							"});",
							"",
							"pm.test(\"Resources have required fields\", function () {",
							"    const jsonData = pm.response.json();",
							"    const resources = jsonData.result.resources;",
							"    resources.forEach(function(resource) {",
							"        pm.expect(resource).to.have.property('uri');",
							"        pm.expect(resource).to.have.property('name');",
							"        pm.expect(resource).to.have.property('title');",
							"        pm.expect(resource).to.have.property('description');",
							"    });",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "03. Read Static Resource (Welcome Message)",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json, text/event-stream"
					},
					{
						"key": "MCP-Protocol-Version",
						"value": "2025-06-18"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"resources/read\",\n    \"params\": {\n        \"uri\": \"app:///messages/welcome\"\n    },\n    \"id\": 3\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/mcp",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"mcp"
					]
				},
				"description": "Read the static welcome message resource. Should return the same message every time."
			}
		},
		{
			"name": "05. Read Templated Resource (User: demo_user)",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json, text/event-stream"
					},
					{
						"key": "MCP-Protocol-Version",
						"value": "2025-06-18"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"resources/read\",\n    \"params\": {\n        \"uri\": \"users://demo_user/profile\"\n    },\n    \"id\": 5\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/mcp",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"mcp"
					]
				},
				"description": "Read a user profile using the templated resource with user_id 'demo_user'. Shows how URI templates work."
			}
		},
		{
			"name": "06. Read Templated Resource (User: jane.doe)",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json, text/event-stream"
					},
					{
						"key": "MCP-Protocol-Version",
						"value": "2025-06-18"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"resources/read\",\n    \"params\": {\n        \"uri\": \"users://jane.doe/profile\"\n    },\n    \"id\": 6\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/mcp",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"mcp"
					]
				},
				"description": "Read a different user profile to demonstrate how the same template works with different user IDs."
			}
		},
		{
			"name": "07. Read File Listing Resource",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json, text/event-stream"
					},
					{
						"key": "MCP-Protocol-Version",
						"value": "2025-06-18"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"resources/read\",\n    \"params\": {\n        \"uri\": \"app:///files/list\"\n    },\n    \"id\": 7\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/mcp",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"mcp"
					]
				},
				"description": "Read the project files listing resource. Returns JSON with metadata about all available files."
			}
		},
		{
			"name": "08. Read Individual File (README.md)",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json, text/event-stream"
					},
					{
						"key": "MCP-Protocol-Version",
						"value": "2025-06-18"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"resources/read\",\n    \"params\": {\n        \"uri\": \"file:///project/README.md\"\n    },\n    \"id\": 8\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/mcp",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"mcp"
					]
				},
				"description": "Read a specific file using the file template resource. Shows content with metadata header."
			}
		},
		{
			"name": "09. Read Individual File (main.py)",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json, text/event-stream"
					},
					{
						"key": "MCP-Protocol-Version",
						"value": "2025-06-18"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"resources/read\",\n    \"params\": {\n        \"uri\": \"file:///project/main.py\"\n    },\n    \"id\": 9\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/mcp",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"mcp"
					]
				},
				"description": "Read another specific file to demonstrate the file template with different file paths."
			}
		},
		{
			"name": "10. Error: Invalid Resource URI",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json, text/event-stream"
					},
					{
						"key": "MCP-Protocol-Version",
						"value": "2025-06-18"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"resources/read\",\n    \"params\": {\n        \"uri\": \"app:///nonexistent/resource\"\n    },\n    \"id\": 11\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/mcp",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"mcp"
					]
				},
				"description": "Test error handling by requesting a resource that doesn't exist. Should return an error response."
			}
		},
		{
			"name": "11. Error: File Not Found",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json, text/event-stream"
					},
					{
						"key": "MCP-Protocol-Version",
						"value": "2025-06-18"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"resources/read\",\n    \"params\": {\n        \"uri\": \"file:///project/nonexistent.txt\"\n    },\n    \"id\": 12\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/mcp",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"mcp"
					]
				},
				"description": "Test error handling for file template by requesting a file that doesn't exist in our virtual file system."
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8000",
			"type": "string"
		}
	]
} 