{
	"info": {
		"name": "MCP Initialization Deep Dive",
		"description": "Comprehensive collection for testing MCP server initialization, capability negotiation, and connection lifecycle management using the 2025-03-26 specification.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "01. Successful Initialization Flow",
			"item": [
				{
					"name": "Step 1: Initialize Request",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json, text/event-stream"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"initialize\",\n    \"params\": {\n        \"protocolVersion\": \"2025-03-26\",\n        \"clientInfo\": {\n            \"name\": \"postman-client\",\n            \"version\": \"1.0.0\"\n        },\n        \"capabilities\": {\n            \"roots\": {\n                \"listChanged\": true\n            },\n            \"sampling\": {}\n        }\n    },\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/mcp",
							"host": ["{{baseUrl}}"],
							"path": ["mcp"]
						},
						"description": "Send initialize request with 2025-03-26 protocol version and client capabilities. Server should respond with its capabilities."
					}
				},
				{
					"name": "Step 2: Initialized Notification",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"initialized\",\n    \"params\": {}\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/mcp",
							"host": ["{{baseUrl}}"],
							"path": ["mcp"]
						},
						"description": "Send initialized notification to complete the three-phase handshake. After this, normal operations can begin."
					}
				}
			],
			"description": "Complete successful initialization flow demonstrating the three-phase handshake."
		},
		{
			"name": "02. Version Negotiation Scenarios",
			"item": [
				{
					"name": "Compatible Version Request",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"initialize\",\n    \"params\": {\n        \"protocolVersion\": \"2025-03-26\",\n        \"clientInfo\": {\n            \"name\": \"version-test-client\",\n            \"version\": \"1.0.0\"\n        },\n        \"capabilities\": {}\n    },\n    \"id\": 2\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/mcp",
							"host": ["{{baseUrl}}"],
							"path": ["mcp"]
						},
						"description": "Test with current protocol version. Server should respond with same version."
					}
				},
				{
					"name": "Older Version Request",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"initialize\",\n    \"params\": {\n        \"protocolVersion\": \"2024-11-05\",\n        \"clientInfo\": {\n            \"name\": \"legacy-client\",\n            \"version\": \"1.0.0\"\n        },\n        \"capabilities\": {}\n    },\n    \"id\": 3\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/mcp",
							"host": ["{{baseUrl}}"],
							"path": ["mcp"]
						},
						"description": "Test with older protocol version. Server should respond with its supported version or error."
					}
				}
			],
			"description": "Test different protocol version scenarios and negotiation behavior."
		},
		{
			"name": "03. Capability Negotiation",
			"item": [
				{
					"name": "Full Capabilities Request",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"initialize\",\n    \"params\": {\n        \"protocolVersion\": \"2025-03-26\",\n        \"clientInfo\": {\n            \"name\": \"full-capability-client\",\n            \"version\": \"1.0.0\"\n        },\n        \"capabilities\": {\n            \"roots\": {\n                \"listChanged\": true\n            },\n            \"sampling\": {}\n        }\n    },\n    \"id\": 4\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/mcp",
							"host": ["{{baseUrl}}"],
							"path": ["mcp"]
						},
						"description": "Request with full client capabilities. Observe what server capabilities are returned."
					}
				},
				{
					"name": "Minimal Capabilities Request",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"initialize\",\n    \"params\": {\n        \"protocolVersion\": \"2025-03-26\",\n        \"clientInfo\": {\n            \"name\": \"minimal-client\",\n            \"version\": \"1.0.0\"\n        },\n        \"capabilities\": {}\n    },\n    \"id\": 5\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/mcp",
							"host": ["{{baseUrl}}"],
							"path": ["mcp"]
						},
						"description": "Request with no client capabilities. Server should still respond with its available capabilities."
					}
				}
			],
			"description": "Test different capability negotiation scenarios."
		},
		{
			"name": "04. Error Scenarios",
			"item": [
				{
					"name": "Malformed JSON Request",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"initialize\",\n    \"params\": {\n        \"protocolVersion\": \"2025-03-26\",\n        \"clientInfo\": {\n            \"name\": \"malformed-client\"\n            // Missing comma and closing brace\n        }\n    },\n    \"id\": 6\n"
						},
						"url": {
							"raw": "{{baseUrl}}/mcp",
							"host": ["{{baseUrl}}"],
							"path": ["mcp"]
						},
						"description": "Send malformed JSON to test error handling. Should return JSON-RPC parse error."
					}
				},
				{
					"name": "Missing Required Fields",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"initialize\",\n    \"params\": {\n        \"clientInfo\": {\n            \"name\": \"incomplete-client\",\n            \"version\": \"1.0.0\"\n        }\n    },\n    \"id\": 7\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/mcp",
							"host": ["{{baseUrl}}"],
							"path": ["mcp"]
						},
						"description": "Send initialize request without protocolVersion. Should return invalid params error."
					}
				},
				{
					"name": "Invalid Protocol Version",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"initialize\",\n    \"params\": {\n        \"protocolVersion\": \"invalid-version\",\n        \"clientInfo\": {\n            \"name\": \"invalid-version-client\",\n            \"version\": \"1.0.0\"\n        },\n        \"capabilities\": {}\n    },\n    \"id\": 8\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/mcp",
							"host": ["{{baseUrl}}"],
							"path": ["mcp"]
						},
						"description": "Send invalid protocol version. Server should handle gracefully."
					}
				}
			],
			"description": "Test various error conditions during initialization."
		},
		{
			"name": "05. Post-Initialization Operations",
			"item": [
				{
					"name": "Tools List After Init",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"tools/list\",\n    \"params\": {},\n    \"id\": 9\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/mcp",
							"host": ["{{baseUrl}}"],
							"path": ["mcp"]
						},
						"description": "Test normal operations after successful initialization. This should work if tools capability was negotiated."
					}
				},
				{
					"name": "Request Before Initialization",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"tools/list\",\n    \"params\": {},\n    \"id\": 10\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/mcp",
							"host": ["{{baseUrl}}"],
							"path": ["mcp"]
						},
						"description": "Send tools/list request without initialization. Server should reject this request."
					}
				}
			],
			"description": "Test operations after initialization and verify initialization requirements."
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8000",
			"type": "string"
		}
	]
} 