{
	"info": {
		"name": "MCP Prompt Templates",
		"description": "Educational Postman collection for testing MCP servers with prompt templates. Demonstrates prompt discovery and generation for simple and complex prompt templates.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "01. Discover Available Prompts",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json, text/event-stream"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"prompts/list\",\n    \"params\": {},\n    \"id\": 1\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/mcp",
					"host": ["{{baseUrl}}"],
					"path": ["mcp"]
				},
				"description": "Discover what prompt templates the server provides. Should return 'summarize' and 'debug_error' prompts with their schemas and descriptions."
			}
		},
		{
			"name": "02. Get Simple Prompt (Summarize Short Text)",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json, text/event-stream"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"prompts/get\",\n    \"params\": {\n        \"name\": \"summarize\",\n        \"arguments\": {\n            \"text\": \"The quick brown fox jumps over the lazy dog. This is a common pangram used in typography and font testing.\"\n        }\n    },\n    \"id\": 2\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/mcp",
					"host": ["{{baseUrl}}"],
					"path": ["mcp"]
				},
				"description": "Generate a summarization prompt for a short text. Should return a single user message with the formatted prompt."
			}
		},
		{
			"name": "03. Get Simple Prompt (Summarize Long Text)",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json, text/event-stream"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"prompts/get\",\n    \"params\": {\n        \"name\": \"summarize\",\n        \"arguments\": {\n            \"text\": \"Machine learning is a subset of artificial intelligence that focuses on the development of algorithms and statistical models that enable computer systems to improve their performance on a specific task through experience. Unlike traditional programming where explicit instructions are provided, machine learning systems learn patterns from data and make predictions or decisions based on that learning. There are three main types of machine learning: supervised learning, where the algorithm learns from labeled training data; unsupervised learning, where the algorithm finds patterns in data without labeled examples; and reinforcement learning, where an agent learns to make decisions by receiving rewards or penalties for its actions.\"\n        }\n    },\n    \"id\": 3\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/mcp",
					"host": ["{{baseUrl}}"],
					"path": ["mcp"]
				},
				"description": "Generate a summarization prompt for a longer, more complex text about machine learning."
			}
		},
		{
			"name": "04. Get Simple Prompt (Summarize Code)",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json, text/event-stream"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"prompts/get\",\n    \"params\": {\n        \"name\": \"summarize\",\n        \"arguments\": {\n            \"text\": \"def fibonacci(n):\\n    if n <= 1:\\n        return n\\n    else:\\n        return fibonacci(n-1) + fibonacci(n-2)\\n\\n# Calculate the 10th Fibonacci number\\nresult = fibonacci(10)\\nprint(f'The 10th Fibonacci number is: {result}')\"\n        }\n    },\n    \"id\": 4\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/mcp",
					"host": ["{{baseUrl}}"],
					"path": ["mcp"]
				},
				"description": "Test the summarize prompt with code content to see how it handles different types of text."
			}
		},
		{
			"name": "05. Get Complex Prompt (Python Error)",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json, text/event-stream"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"prompts/get\",\n    \"params\": {\n        \"name\": \"debug_error\",\n        \"arguments\": {\n            \"error_message\": \"TypeError: 'NoneType' object is not iterable\",\n            \"code_snippet\": \"def process_data(data):\\n    result = None\\n    for item in result:\\n        print(item)\\n    return result\"\n        }\n    },\n    \"id\": 5\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/mcp",
					"host": ["{{baseUrl}}"],
					"path": ["mcp"]
				},
				"description": "Generate a debugging conversation prompt for a Python TypeError. Should return multiple messages setting up a debugging session."
			}
		},
		{
			"name": "06. Get Complex Prompt (Index Error)",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json, text/event-stream"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"prompts/get\",\n    \"params\": {\n        \"name\": \"debug_error\",\n        \"arguments\": {\n            \"error_message\": \"IndexError: list index out of range\",\n            \"code_snippet\": \"numbers = [1, 2, 3]\\nfor i in range(5):\\n    print(numbers[i])\"\n        }\n    },\n    \"id\": 6\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/mcp",
					"host": ["{{baseUrl}}"],
					"path": ["mcp"]
				},
				"description": "Generate a debugging conversation for an IndexError with a simple loop that goes out of bounds."
			}
		},
		{
			"name": "07. Get Complex Prompt (Import Error)",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json, text/event-stream"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"prompts/get\",\n    \"params\": {\n        \"name\": \"debug_error\",\n        \"arguments\": {\n            \"error_message\": \"ModuleNotFoundError: No module named 'pandas'\",\n            \"code_snippet\": \"import pandas as pd\\nimport numpy as np\\n\\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})\\nprint(df.head())\"\n        }\n    },\n    \"id\": 7\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/mcp",
					"host": ["{{baseUrl}}"],
					"path": ["mcp"]
				},
				"description": "Generate a debugging conversation for a ModuleNotFoundError when trying to import pandas."
			}
		},
		{
			"name": "08. Get Complex Prompt (Syntax Error)",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json, text/event-stream"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"prompts/get\",\n    \"params\": {\n        \"name\": \"debug_error\",\n        \"arguments\": {\n            \"error_message\": \"SyntaxError: invalid syntax\",\n            \"code_snippet\": \"def calculate_sum(a, b\\n    return a + b\\n\\nresult = calculate_sum(5, 3)\\nprint(result)\"\n        }\n    },\n    \"id\": 8\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/mcp",
					"host": ["{{baseUrl}}"],
					"path": ["mcp"]
				},
				"description": "Generate a debugging conversation for a SyntaxError with a missing closing parenthesis."
			}
		},
		{
			"name": "09. Error: Invalid Prompt Name",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json, text/event-stream"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"prompts/get\",\n    \"params\": {\n        \"name\": \"nonexistent_prompt\",\n        \"arguments\": {}\n    },\n    \"id\": 9\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/mcp",
					"host": ["{{baseUrl}}"],
					"path": ["mcp"]
				},
				"description": "Test error handling by requesting a prompt template that doesn't exist. Should return an error response."
			}
		},
		{
			"name": "10. Error: Missing Required Parameter",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json, text/event-stream"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"prompts/get\",\n    \"params\": {\n        \"name\": \"summarize\",\n        \"arguments\": {}\n    },\n    \"id\": 10\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/mcp",
					"host": ["{{baseUrl}}"],
					"path": ["mcp"]
				},
				"description": "Test error handling by omitting the required 'text' parameter for the summarize prompt. Should return a validation error."
			}
		},
		{
			"name": "11. Error: Partial Parameters for Complex Prompt",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json, text/event-stream"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"prompts/get\",\n    \"params\": {\n        \"name\": \"debug_error\",\n        \"arguments\": {\n            \"error_message\": \"Some error occurred\"\n        }\n    },\n    \"id\": 11\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/mcp",
					"host": ["{{baseUrl}}"],
					"path": ["mcp"]
				},
				"description": "Test error handling by providing only one of the two required parameters for the debug_error prompt. Should return a validation error."
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8000",
			"type": "string"
		}
	]
} 